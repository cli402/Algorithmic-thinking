'''Project 1 - Degree distributions for graphs'''

EX_GRAPH0={0:set([1,2]),1:set([]),2:set([])}
EX_GRAPH1={0:set([1,4,5]),1:set([2,6]),2:set([3]),3:set([0]),4:set([1]),5:set([2]),6:set([])}
EX_GRAPH2={0:set([1,4,5]),1:set([2,6]),2:set([3,7]),3:set([7]),4:set([1]),5:set([2]),6:set([]),
           7:set([3]),8:set([1,2]),9:set([0,3,4,5,6,7])}


def make_complete_graph(num_nodes):
    '''return a complete graph if num_nodes is positive
        else return an empty graph'''
    if(num_nodes>0):
        completegraph={}
        for iume in range(0,num_nodes):
            completegraph[iume]=set([])
            for jexe in range(0,num_nodes):
                    if jexe!=iume:
                        completegraph[iume].add(jexe);
    return completegraph

def compute_in_degrees(digraph):
    '''compute the in degree of the specific node'''
    digrap_degree={}
    for key in digraph:
        digrap_degree[key]=0
    for key in digraph:
        for element in digraph[key]:
            if element in digrap_degree:
                digrap_degree[element]+=1
    return digrap_degree

def in_degree_distribution(digraph):
    ''' Takes a directed graph digraph (represented as a dictionary)
        and computes the unnormalized distribution of
        the in-degrees of the graph'''
    distri_graph=compute_in_degrees(digraph)
    distri_num={}
    for key in distri_graph:
        element=distri_graph[key]
        if element in distri_num:
            distri_num[element]+=1
        else:
            distri_num[element]= 1
    return distri_num

a=compute_in_degrees(EX_GRAPH0)
b=in_degree_distribution(EX_GRAPH0)
print a
print b
